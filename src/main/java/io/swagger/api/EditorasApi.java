/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.5).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.Editoras;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2019-06-03T13:35:21.408Z")

@Api(value = "editoras", description = "the editoras API")
public interface EditorasApi {

    @ApiOperation(value = "adds an editora item", nickname = "addEditora", notes = "Adds an item to the system", tags={ "admins", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "item created"),
        @ApiResponse(code = 400, message = "invalid input, object invalid"),
        @ApiResponse(code = 409, message = "an existing item already exists") })
    @RequestMapping(value = "/editoras",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> addEditora(@ApiParam(value = "editora item to add"  )  @Valid @RequestBody Editoras editoraItem);


    @ApiOperation(value = "Deletes a editora", nickname = "deleteEditora", notes = "", tags={ "admins", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "editora deletada"),
        @ApiResponse(code = 400, message = "Invalid ID supplied"),
        @ApiResponse(code = 404, message = "editora not found") })
    @RequestMapping(value = "/editoras",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteEditora(@ApiParam(value = "editora id to delete",required=true) @PathVariable("editoraId") Long editoraId,@ApiParam(value = "" ) @RequestHeader(value="api_key", required=false) String apiKey);


    @ApiOperation(value = "searches editoras", nickname = "searchEditoras", notes = "Retorna uma lista de editoras ", response = Editoras.class, responseContainer = "List", tags={ "admins", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "search results matching criteria", response = Editoras.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "bad input parameter") })
    @RequestMapping(value = "/editoras",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Editoras>> searchEditoras(@ApiParam(value = "pass an optional search string for looking up editoras") @Valid @RequestParam(value = "searchString", required = false) String searchString,@Min(0)@ApiParam(value = "number of records to skip for pagination") @Valid @RequestParam(value = "skip", required = false) Integer skip,@Min(0) @Max(50) @ApiParam(value = "maximum number of records to return") @Valid @RequestParam(value = "limit", required = false) Integer limit);


    @ApiOperation(value = "Update an existing editora", nickname = "updateEditora", notes = "", tags={ "admins", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "editora alterado"),
        @ApiResponse(code = 400, message = "invalid editora"),
        @ApiResponse(code = 404, message = "editora not faund") })
    @RequestMapping(value = "/editoras",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> updateEditora(@ApiParam(value = "editora object that needs to be added to the store" ,required=true )  @Valid @RequestBody Editoras body);

}
