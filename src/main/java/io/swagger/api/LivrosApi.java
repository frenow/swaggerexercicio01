/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.5).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.Livros;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2019-06-03T13:35:21.408Z")

@Api(value = "livros", description = "the livros API")
public interface LivrosApi {

    @ApiOperation(value = "adds an livros item", nickname = "addLivro", notes = "Adds an item to the system", tags={ "admins", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "item created"),
        @ApiResponse(code = 400, message = "invalid input, object invalid"),
        @ApiResponse(code = 409, message = "an existing item already exists") })
    @RequestMapping(value = "/livros",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> addLivro(@ApiParam(value = "livro item to add"  )  @Valid @RequestBody Livros livroItem);


    @ApiOperation(value = "Deletes a livro", nickname = "deleteLivro", notes = "", tags={ "admins", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "livro deletado"),
        @ApiResponse(code = 400, message = "Invalid ID supplied"),
        @ApiResponse(code = 404, message = "livro not found") })
    @RequestMapping(value = "/livros",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteLivro(@ApiParam(value = "livro id to delete",required=true) @PathVariable("livroId") Long livroId,@ApiParam(value = "" ) @RequestHeader(value="api_key", required=false) String apiKey);


    @ApiOperation(value = "searches Livros", nickname = "searchLivros", notes = "Retorna uma lista de livros ", response = Livros.class, responseContainer = "List", tags={ "admins", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "search results matching criteria", response = Livros.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "bad input parameter") })
    @RequestMapping(value = "/livros",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Livros>> searchLivros(@ApiParam(value = "pass an optional search string for looking up livros") @Valid @RequestParam(value = "searchString", required = false) String searchString,@Min(0)@ApiParam(value = "number of records to skip for pagination") @Valid @RequestParam(value = "skip", required = false) Integer skip,@Min(0) @Max(50) @ApiParam(value = "maximum number of records to return") @Valid @RequestParam(value = "limit", required = false) Integer limit);


    @ApiOperation(value = "Update an existing livro", nickname = "updateLivro", notes = "", tags={ "admins", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Livro alterado"),
        @ApiResponse(code = 400, message = "invalid livro"),
        @ApiResponse(code = 404, message = "livro not faund") })
    @RequestMapping(value = "/livros",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> updateLivro(@ApiParam(value = "livro object that needs to be added to the store" ,required=true )  @Valid @RequestBody Livros body);

}
